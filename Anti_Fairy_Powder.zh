//Saffith, Antifairy

// import "std.zh"
// import "string.zh"
// import "ghost.zh"

// npc->Attributes[] indices
const int WB_ATTR_TILE_WIDTH = 2;
const int WB_ATTR_TILE_HEIGHT = 3;
const int WB_ATTR_IGNORE_WATER = 4;
const int WB_ATTR_IGNORE_PITS = 5;

//Magic powder settings.
const int WEAP_MAGIC_POWDER_SPRITE = 60; //Set this to the sprite ID that you wish to use.
const int WEAP_MAGIC_POWDER_DIST = 10; //The distance away from Link to create the weapon. 
const int WEAP_MAGIC_POWDER_MISC_INDEX = 1; //The misc index to use for lweapon flag storage. 
const int WEAP_MAGIC_POWDER_MISC_FLAG = 000100b; //The flag for the magic powder. 

item script MagicPowder
{
	void run()
	{
		//Magic powder is a sparkle-class weapon, so we are using a flag to (later) compare for it. 
		lweapon dust = NextToLink(LW_SPARKLE, int WEAP_MAGIC_POWDER_DIST);
		dust->UseSprite(WEAP_MAGIC_POWDER_SPRITE);
		dist->Misc[WEAP_MAGIC_POWDER_MISC_INDEX] |= WEAP_MAGIC_POWDER_MISC_FLAG;
	}
}
	

ffc script WallBouncer
{
    void run(int enemyID)
    {
        npc ghost;
        int flags;
        int angle;
        float step;
        float xStep;
        float yStep;
        
        // Initialize
        ghost=Ghost_InitAutoGhost(this, enemyID, GHF_NO_FALL);
        Ghost_TileWidth=Ghost_GetAttribute(ghost, WB_ATTR_TILE_WIDTH, 1, 1, 4);
        Ghost_TileHeight=Ghost_GetAttribute(ghost, WB_ATTR_TILE_HEIGHT, 1, 1, 4);
        Ghost_SpawnAnimationPuff(this, ghost);
        
        // Set flags
        flags=GHF_STUN|GHF_CLOCK;
        if(ghost->Attributes[WB_ATTR_IGNORE_WATER]>0)
            flags|=GHF_IGNORE_WATER;
        if(ghost->Attributes[WB_ATTR_IGNORE_PITS]>0)
            flags|=GHF_IGNORE_PITS;
        Ghost_SetFlags(flags);
        
        // Get initial movement
        angle=45+90*Rand(4);
        step=ghost->Step/100;
        ghost->Step=0; // In case it's a walker
        
        xStep=step*Cos(angle);
        yStep=step*Sin(angle);
	int faerie[3];
        
        while(true)
        {
            // Bounce
            if(xStep<0)
            {
                if(!Ghost_CanMove(DIR_LEFT, -xStep, 3))
                   xStep*=-1;
            }
            else
            {
                if(!Ghost_CanMove(DIR_RIGHT, xStep, 3))
                   xStep*=-1;
            }
            
            if(yStep<0)
            {
                if(!Ghost_CanMove(DIR_UP, -yStep, 3))
                   yStep*=-1;
            }
            else
            {
                if(!Ghost_CanMove(DIR_DOWN, yStep, 3))
                   yStep*=-1;
            }
            
            // And move
	    
	    //Check for magic power interaction:
	    for ( int q = Screen->NumLWeapons(); q > 0; --q )
	    {
		    lweapon lw = Screen->LoadLWeapon(q);
		    if ( q->ID != LW_SPARKLE ) { continue; }
		    if ( q->Misc[WEAP_MAGIC_POWDER_MISC_INDEX]&WEAP_MAGIC_POWDER_MISC_FLAG ) //matches magic powder flag set from the item script
		    {
			if ( Collision(lw, this) ) { faerie[0] = 1; break; }
			if ( Collision(lw, ghost) ) { faerie[0] = 1; break; }
		    }
	    }
	    
	    //Transformation
	    if ( faerie[0] ) 
	    {
		    faerie[1] = ghost->X;
		    faerie[2] = ghost->Y;
		    item fairy = Screen->CreateItem(I_FAIRY);
		    fairy->X = faerie[1];
		    fairy->Y = faerie[2];
		    Kill(this,ghost);
		    
	    }
            Ghost_MoveXY(xStep, yStep, 3);
            Ghost_Waitframe(this, ghost, true, true);
        }
    }
    void kill(ffc a, npc b)
    {
	    ___kill(a); ___kill(b);
	    Quit();
    }
    void ___kill(npc n)
    {
	    n->HP = HP_SILENT; 
	    Remove(n);
    }
    void ___kill(ffc f)
    {
	f->Data = 0;
	f->Script = 0;
	f->CSet = 0;
	f->Delay = 0;
	f->X = 0;
	f->Y = 0;
	f->Vx = 0;
	f->Vy = 0;
	f->Ax = 0;
	f->Ay = 0;
	f->TileWidth = 1;
	f->TileHeight = 1;
	f->EffectWidth = 16;
	f->EffectHeight = 16;
	f->Link = 0;
	for ( int q = 0; q <= 15; q++ ) f->Misc[q] = 0;
	for ( int q = 0; q <= 10; q++ ) f->Flags[q] = false;
	
    }
    
}

/*
This will work with walking enemies so you can use their touch effects. Other attributes won't work normally.

Attribute 3 (Death Attr. 1): Tile width (1-4, default 1)
Attribute 4 (Death Attr. 2): Tile Height (1-4, default 1)
Attribute 5 (Death Attr. 3): Move over water (0: no, 1: yes)
Attribute 6 (Extra Shots): Move over direct warps (0: no, 1: yes) 
*/